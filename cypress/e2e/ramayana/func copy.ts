export const transaction = (
    INPUT,
    DATA
) => {
    expect(INPUT.RETAILSTOREID).equal(DATA.RETAILSTOREID)
    expect(INPUT.BUSINESSDAYDATE).equal(DATA.BUSINESSDAYDATE)
    expect(INPUT.DEPARTMENT).equal(DATA.DEPARTMENT)
    expect(INPUT.WORKSTATIONID).equal(DATA.WORKSTATIONID)
    expect(INPUT.TRANSACTIONSEQUENCENUMBER).equal(DATA.TRANSACTIONSEQUENCENUMBER)
    expect(INPUT.OPERATORID).equal(DATA.OPERATORID)
    expect(INPUT.TRANSACTIONCURRENCY).equal(DATA.TRANSACTIONCURRENCY)
}

export const transaction_transactionExt = (
    INPUT,
    DATA
) => {
    expect(INPUT.ZZPOSTAXID).equal(DATA.ZZPOSTAXID)
    expect(INPUT.ZZSHOPPINGCARDNO).equal(DATA.ZZSHOPPINGCARDNO)
    expect(INPUT.ZZCUSTOMERNAME).equal(DATA.ZZCUSTOMERNAME)
    expect(INPUT.ZZFLIGHTCODE).equal(DATA.ZZFLIGHTCODE)
    expect(INPUT.ZZFLIGHTCODE).equal(DATA.ZZFLIGHTCODE)
    expect(INPUT.ZZFLIGHTCODE).equal(DATA.ZZFLIGHTCODE)
    expect(INPUT.ZZFLIGHTCODE).equal(DATA.ZZFLIGHTCODE)
    expect(INPUT.ZZCUSTOMERTYPE).equal(DATA.ZZCUSTOMERTYPE)
    expect(INPUT.ZZCUSTOMERTYPE).equal(DATA.ZZCUSTOMERTYPE)
    expect(INPUT.ZZCUSTOMERTYPE).equal(DATA.ZZCUSTOMERTYPE)
    expect(INPUT.ZZRECEIVEDSITE).equal(DATA.ZZRECEIVEDSITE)
    expect(INPUT.ZZRECEIVEDDATE).equal(DATA.ZZRECEIVEDDATE)
    expect(INPUT.ZZRECEIVEDMACHINENO).equal(DATA.ZZRECEIVEDMACHINENO)
    expect(INPUT.ZZRECEIVEDINVOICENO).equal(DATA.ZZRECEIVEDINVOICENO)
    expect(INPUT.ZZCANCELDATE).equal(DATA.ZZCANCELDATE)
    expect(INPUT.ZZCANCELMACHINENO).equal(DATA.ZZCANCELMACHINENO)
    expect(INPUT.ZZCANCELINVOICENO).equal(DATA.ZZCANCELINVOICENO)
    expect(INPUT.ZZSOURCE).equal(DATA.ZZSOURCE)
    expect(INPUT.ZZMILEAGEVENDOR).equal(DATA.ZZMILEAGEVENDOR)
    expect(INPUT.ZZMILEAGENO).equal(DATA.ZZMILEAGENO)
    expect(INPUT.ZZMILEAGEFIRSTNAME).equal(DATA.ZZMILEAGEFIRSTNAME)
    expect(INPUT.ZZMILEAGELASTNAME).equal(DATA.ZZMILEAGELASTNAME)
    expect(INPUT.ZZPICKUPCODE).equal(DATA.ZZPICKUPCODE)
    expect(INPUT.ZZCOUNTRYCODE).equal(DATA.ZZCOUNTRYCODE)
    expect(INPUT.ZZRUNNINGNO).equal(DATA.ZZRUNNINGNO)
    expect(INPUT.ZZMEMBERCODE).equal(DATA.ZZMEMBERCODE)
    expect(INPUT.ZZMEMBERTYPE).equal(DATA.ZZMEMBERTYPE)
    expect(INPUT.ZZCUSTOMERGROUP).equal(DATA.ZZCUSTOMERGROUP)
    expect(INPUT.ZZTRANSDATE).equal(DATA.ZZTRANSDATE)
    expect(INPUT.ZZTRANSTIME).equal(DATA.ZZTRANSTIME)
    expect(INPUT.ZZSHIFTNUMBER).equal(DATA.ZZSHIFTNUMBER)
    expect(INPUT.ZZPROVINCECODE).equal(DATA.ZZPROVINCECODE)
    expect(INPUT.ZZCITYCODE).equal(DATA.ZZCITYCODE)
    expect(INPUT.ZZBRANCHNO).equal(DATA.ZZBRANCHNO)
    expect(INPUT.ZZORDERNO).equal(DATA.ZZORDERNO)
    expect(INPUT.ZZORDERTYPE).equal(DATA.ZZORDERTYPE)
    expect(INPUT.ZZPACKNO).equal(DATA.ZZPACKNO)
    expect(INPUT.ZZFLIGHTTYPE).equal(DATA.ZZFLIGHTTYPE)
    expect(INPUT.ZZMOVEHANGINGDATE).equal(DATA.ZZMOVEHANGINGDATE)
    expect(INPUT.ZZMOVEHANGINGDATE).equal(DATA.ZZMOVEHANGINGDATE)
    expect(INPUT.ZZBOXNO).equal(DATA.ZZBOXNO)
    expect(INPUT.ZZBOXBY).equal(DATA.ZZBOXBY)
    expect(INPUT.ZZBOXDATE).equal(DATA.ZZBOXDATE)
    expect(INPUT.ZZBOXTIME).equal(DATA.ZZBOXTIME)
    expect(INPUT.ZZTRIPNO).equal(DATA.ZZTRIPNO)
    expect(INPUT.ZZTRUCKNO).equal(DATA.ZZTRUCKNO)
    expect(INPUT.ZZTRUCKBY).equal(DATA.ZZTRUCKBY)
    expect(INPUT.ZZTRUCKDATE).equal(DATA.ZZTRUCKDATE)
    expect(INPUT.ZZTRUCKTIME).equal(DATA.ZZTRUCKTIME)
    expect(INPUT.ZZPICKUPSTAFFCODE).equal(DATA.ZZPICKUPSTAFFCODE)
    expect(INPUT.ZZPICKUPDATE).equal(DATA.ZZPICKUPDATE)
    expect(INPUT.ZZISSUEDSTATUS).equal(DATA.ZZISSUEDSTATUS)
    expect(INPUT.ZZISSUEDDATE).equal(DATA.ZZISSUEDDATE)
    expect(INPUT.ZZISSUEDTIME).equal(DATA.ZZISSUEDTIME)
    expect(INPUT.ZZISSUEDBY).equal(DATA.ZZISSUEDBY)
    expect(INPUT.ZZISSUEDTYPE).equal(DATA.ZZISSUEDTYPE)
    expect(INPUT.ZZAGENTCODE).equal(DATA.ZZAGENTCODE)
    expect(INPUT.ZZHOTELCODE).equal(DATA.ZZHOTELCODE)
    expect(INPUT.ZZHOTELSOURCE).equal(DATA.ZZHOTELSOURCE)
    expect(INPUT.ZZISDELIVERY).equal(DATA.ZZISDELIVERY)
    expect(INPUT.ZZPICKUPTYPECODE).equal(DATA.ZZPICKUPTYPECODE)
    expect(INPUT.ZZDELIVERYCOST).equal(DATA.ZZDELIVERYCOST)
    expect(INPUT.ZZSEX).equal(DATA.ZZSEX)
    expect(INPUT.ZZPROVINCEARRIVAL).equal(DATA.ZZPROVINCEARRIVAL)
    expect(INPUT.ZZCOLLECTINVOICE).equal(DATA.ZZCOLLECTINVOICE)
}

export const transaction_headerAttribute = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
        expect(INPUT[i].ZZFIELDNAME).equal(DATA[i].ZZFIELDNAME)
        expect(INPUT[i].ZZFIELDVALUE).equal(DATA[i].ZZFIELDVALUE)
    }
}

export const transaction_retailLineItem = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
        cy.log('ITEM # '+i)
        expect(INPUT[i].RETAILSEQUENCENUMBER).equal(DATA[i].RETAILSEQUENCENUMBER)
        expect(INPUT[i].RETAILTYPECODE).equal(DATA[i].RETAILTYPECODE)
        expect(INPUT[i].ITEMIDQUALIFIER).equal(DATA[i].ITEMIDQUALIFIER)
        expect(INPUT[i].ITEMID).equal(DATA[i].ITEMID)
        expect(INPUT[i].SERIALNUMBER).equal(DATA[i].SERIALNUMBER)
        expect(INPUT[i].BATCHID).equal(DATA[i].BATCHID)
        expect(INPUT[i].RETAILQUANTITY).equal(DATA[i].RETAILQUANTITY)
        expect(INPUT[i].SALESUNITOFMEASURE).equal(DATA[i].SALESUNITOFMEASURE)
        expect(INPUT[i].SALESAMOUNT).equal(DATA[i].SALESAMOUNT)
        expect(INPUT[i].PROMOTIONID).equal(DATA[i].PROMOTIONID)
    }
}

export const transaction_retailLineItem_lineItemExt = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
        expect(INPUT[i].LINEITEMEXT.ZZTRANSFLAG).equal(DATA[i].LINEITEMEXT.ZZTRANSFLAG)
        expect(INPUT[i].LINEITEMEXT.ZZACCOUNTNOVENDOR).equal(DATA[i].LINEITEMEXT.ZZACCOUNTNOVENDOR)
        expect(INPUT[i].LINEITEMEXT.ZZPLUTYPE).equal(DATA[i].LINEITEMEXT.ZZPLUTYPE)
        expect(INPUT[i].LINEITEMEXT.ZZTAXCLASSIFICATION).equal(DATA[i].LINEITEMEXT.ZZTAXCLASSIFICATION)
        expect(INPUT[i].LINEITEMEXT.ZZITEMTAXAMOUNTDOC).equal(DATA[i].LINEITEMEXT.ZZITEMTAXAMOUNTDOC)
        expect(INPUT[i].LINEITEMEXT.ZZCASHELIGIBILITY).equal(DATA[i].LINEITEMEXT.ZZCASHELIGIBILITY)
        expect(INPUT[i].LINEITEMEXT.ACTUALUNITPRICE).equal(DATA[i].LINEITEMEXT.ACTUALUNITPRICE)
        expect(INPUT[i].LINEITEMEXT.ZZPOSMERCHCATEGORY).equal(DATA[i].LINEITEMEXT.ZZPOSMERCHCATEGORY)
        expect(INPUT[i].LINEITEMEXT.ZZSALESPERSONNO).equal(DATA[i].LINEITEMEXT.ZZSALESPERSONNO)
        expect(INPUT[i].LINEITEMEXT.ZZSERVICECHARGE).equal(DATA[i].LINEITEMEXT.ZZSERVICECHARGE)
        expect(INPUT[i].LINEITEMEXT.ZZCUSTOMSDECNO).equal(DATA[i].LINEITEMEXT.ZZCUSTOMSDECNO)
        expect(INPUT[i].LINEITEMEXT.ZZCUSTOMSITEMNO).equal(DATA[i].LINEITEMEXT.ZZCUSTOMSITEMNO)
        expect(INPUT[i].LINEITEMEXT.ZZTARIFFCL).equal(DATA[i].LINEITEMEXT.ZZTARIFFCL)
        expect(INPUT[i].LINEITEMEXT.ZZTARIFFSE).equal(DATA[i].LINEITEMEXT.ZZTARIFFSE)
        expect(INPUT[i].LINEITEMEXT.ZZTARIFFST).equal(DATA[i].LINEITEMEXT.ZZTARIFFST)
        expect(INPUT[i].LINEITEMEXT.ZZINVOICEITEM).equal(DATA[i].LINEITEMEXT.ZZINVOICEITEM)
        expect(INPUT[i].LINEITEMEXT.ZZBASEVATAMOUNT).equal(DATA[i].LINEITEMEXT.ZZBASEVATAMOUNT)
        expect(INPUT[i].LINEITEMEXT.ZZDEPOSITAMOUNT).equal(DATA[i].LINEITEMEXT.ZZDEPOSITAMOUNT)
        expect(INPUT[i].LINEITEMEXT.ZZDEPOSITVATAMOUNT).equal(DATA[i].LINEITEMEXT.ZZDEPOSITVATAMOUNT)
        expect(INPUT[i].LINEITEMEXT.ZZRECEIVEDINVOICEITEM).equal(DATA[i].LINEITEMEXT.ZZRECEIVEDINVOICEITEM)
        expect(INPUT[i].LINEITEMEXT.ZZORDERITEMNO).equal(DATA[i].LINEITEMEXT.ZZORDERITEMNO)
        expect(INPUT[i].LINEITEMEXT.ZZCOLLECTINVITEM).equal(DATA[i].LINEITEMEXT.ZZCOLLECTINVITEM)
        expect(INPUT[i].LINEITEMEXT.ZZCITESPERMITNO).equal(DATA[i].LINEITEMEXT.ZZCITESPERMITNO)
    }
}

export const transaction_retailLineItem_lineItemDiscount = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
        for (let j = 0; j < DATA[i].LINEITEMDISCOUNT.length; j++) {
        cy.log('ITEM # '+i+' Dicount #' +j)
        expect(INPUT[i].LINEITEMDISCOUNT[j].DISCOUNTSEQUENCENUMBER).equal(DATA[i].LINEITEMDISCOUNT[j].DISCOUNTSEQUENCENUMBER)
        expect(INPUT[i].LINEITEMDISCOUNT[j].DISCOUNTTYPECODE).equal(DATA[i].LINEITEMDISCOUNT[j].DISCOUNTTYPECODE)
        expect(INPUT[i].LINEITEMDISCOUNT[j].REDUCTIONAMOUNT).equal(DATA[i].LINEITEMDISCOUNT[j].REDUCTIONAMOUNT)
        expect(INPUT[i].LINEITEMDISCOUNT[j].BONUSBUYID).equal(DATA[i].LINEITEMDISCOUNT[j].BONUSBUYID)
        }
    }
}

export const transaction_retailLineItem_lineItemDiscount_lineItemDiscountExt = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
        for (let j = 0; j < DATA[i].LINEITEMDISCOUNT.length; j++) {
        expect(INPUT[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZTRANSACTIONFLAG).equal(DATA[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZTRANSACTIONFLAG)
        expect(INPUT[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZPOSPROMOCODE).equal(DATA[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZPOSPROMOCODE)
        expect(INPUT[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZPROMOTIONFLAG).equal(DATA[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZPROMOTIONFLAG)
        expect(INPUT[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZPDISCOUNTRATE).equal(DATA[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZPDISCOUNTRATE)
        expect(INPUT[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZPDISCOUNTAMOUNT).equal(DATA[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZPDISCOUNTAMOUNT)
        expect(INPUT[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZISBILLDISCOUNT).equal(DATA[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZISBILLDISCOUNT)
        expect(INPUT[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZDISCOUNTTYPE).equal(DATA[i].LINEITEMDISCOUNT[j].LINEITEMDISCOUNTEXT.ZZDISCOUNTTYPE)
        }
    }
}

export const transaction_retailLineItem_lineItemTax = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
    expect(INPUT[i].LINEITEMTAX.TAXSEQUENCENUMBER).equal(DATA[i].LINEITEMTAX.TAXSEQUENCENUMBER)
    expect(INPUT[i].LINEITEMTAX.TAXTYPECODE).equal(DATA[i].LINEITEMTAX.TAXTYPECODE)
    expect(INPUT[i].LINEITEMTAX.TAXAMOUNT).equal(DATA[i].LINEITEMTAX.TAXAMOUNT)
    }
}

export const transaction_tender = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
    expect(INPUT[i].TENDERSEQUENCENUMBER).equal(DATA[i].TENDERSEQUENCENUMBER)
    expect(INPUT[i].TAXTYPECODE).equal(DATA[i].TAXTYPECODE)
    expect(INPUT[i].TENDERAMOUNT).equal(DATA[i].TENDERAMOUNT)
    expect(INPUT[i].TENDERCURRENCY).equal(DATA[i].TENDERCURRENCY)
    }
}

export const transaction_tender_tenderExt = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
        expect(INPUT[i].TENDEREXT.TENDEREXT).equal(DATA[i].TENDEREXT.TENDEREXT)
        expect(INPUT[i].TENDEREXT.ZZCURRENCYKEY).equal(DATA[i].TENDEREXT.ZZCURRENCYKEY)
        expect(INPUT[i].TENDEREXT.ZZTOTALDOCAMOUNT).equal(DATA[i].TENDEREXT.ZZTOTALDOCAMOUNT)
        expect(INPUT[i].TENDEREXT.ZZTAXAMOUNTDOC).equal(DATA[i].TENDEREXT.ZZTAXAMOUNTDOC)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTCURRENCY).equal(DATA[i].TENDEREXT.ZZPAYMENTCURRENCY)
        expect(INPUT[i].TENDEREXT.ZZTERMINALID).equal(DATA[i].TENDEREXT.ZZTERMINALID)
        expect(INPUT[i].TENDEREXT.ZZAUTHORIZATIONCODE).equal(DATA[i].TENDEREXT.ZZAUTHORIZATIONCODE)
        expect(INPUT[i].TENDEREXT.ZZTRANSACTIONDATE).equal(DATA[i].TENDEREXT.ZZTRANSACTIONDATE)
        expect(INPUT[i].TENDEREXT.ZZTRANSACTIONTIME).equal(DATA[i].TENDEREXT.ZZTRANSACTIONTIME)
        expect(INPUT[i].TENDEREXT.ZZTRACENO).equal(DATA[i].TENDEREXT.ZZTRACENO)
        expect(INPUT[i].TENDEREXT.ZZPOSBANKEDCREF).equal(DATA[i].TENDEREXT.ZZPOSBANKEDCREF)
        expect(INPUT[i].TENDEREXT.ZZPOSPAYMENTMETHOD).equal(DATA[i].TENDEREXT.ZZPOSPAYMENTMETHOD)
        expect(INPUT[i].TENDEREXT.ZZMETHODGROUP).equal(DATA[i].TENDEREXT.ZZMETHODGROUP)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY01).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY01)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY02).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY02)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY03).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY03)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY04).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY04)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY05).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY05)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY06).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY06)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY07).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY07)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY08).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY08)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY10).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY10)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY11).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY11)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY12).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY12)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY13).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY13)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY14).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY14)
        expect(INPUT[i].TENDEREXT.ZZPAYMENTKEY15).equal(DATA[i].TENDEREXT.ZZPAYMENTKEY15)
    }
}

export const transaction_tender_tenderExt_tenderAttribute = (
    INPUT,
    DATA
) => {
    for (let i = 0; i < DATA.length; i++) {
        for (let j = 0; j < DATA[i].TENDERATTRIBUTE.length; j++) {
        cy.log('ITEM # '+i+' tenderAttribute #' +j)
        expect(INPUT[i].TENDERATTRIBUTE[j].ZZFIELDNAME).equal(DATA[i].TENDERATTRIBUTE[j].ZZFIELDNAME)
        expect(INPUT[i].TENDERATTRIBUTE[j].ZZFIELDVALUE).equal(DATA[i].TENDERATTRIBUTE[j].ZZFIELDVALUE)
        }
    }
}







